{"ast":null,"code":"const AREA_API_BASE_URL = 'http://localhost:5001';\nclass AreaService {\n  constructor(baseUrl = AREA_API_BASE_URL) {\n    this.baseUrl = void 0;\n    this.baseUrl = baseUrl;\n  }\n  async checkHealth() {\n    try {\n      const response = await fetch(`${this.baseUrl}/health`);\n      if (!response.ok) {\n        throw new Error(`Health check failed: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Area service health check error:', error);\n      throw new Error('Area analyzer backend is not available');\n    }\n  }\n  fileToBase64(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => {\n        if (typeof reader.result === 'string') {\n          resolve(reader.result);\n        } else {\n          reject(new Error('Failed to convert file to base64'));\n        }\n      };\n      reader.onerror = () => reject(new Error('Failed to read file'));\n    });\n  }\n  async analyzeAreaFromFile(file) {\n    try {\n      const base64Image = await this.fileToBase64(file);\n      const response = await fetch(`${this.baseUrl}/analyze-area`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          image: base64Image\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `Area analysis failed: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Area analysis error:', error);\n      throw error;\n    }\n  }\n}\nexport const areaService = new AreaService();","map":{"version":3,"names":["AREA_API_BASE_URL","AreaService","constructor","baseUrl","checkHealth","response","fetch","ok","Error","status","json","error","console","fileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","analyzeAreaFromFile","base64Image","method","headers","body","JSON","stringify","image","errorData","catch","areaService"],"sources":["C:/Hackathon/GrowEasy/src/services/areaService.ts"],"sourcesContent":["const AREA_API_BASE_URL = 'http://localhost:5001';\r\n\r\nexport interface AreaAnalysisResult {\r\n  totalArea: number;\r\n  usableArea: number;\r\n  recommendation: string;\r\n  plantingMethod: 'rows' | 'square_foot';\r\n  estimatedPlants: number;\r\n}\r\n\r\nclass AreaService {\r\n  private baseUrl: string;\r\n\r\n  constructor(baseUrl: string = AREA_API_BASE_URL) {\r\n    this.baseUrl = baseUrl;\r\n  }\r\n\r\n  async checkHealth(): Promise<{ status: string; model_loaded: boolean }> {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/health`);\r\n      if (!response.ok) {\r\n        throw new Error(`Health check failed: ${response.status}`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Area service health check error:', error);\r\n      throw new Error('Area analyzer backend is not available');\r\n    }\r\n  }\r\n\r\n  fileToBase64(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => {\r\n        if (typeof reader.result === 'string') {\r\n          resolve(reader.result);\r\n        } else {\r\n          reject(new Error('Failed to convert file to base64'));\r\n        }\r\n      };\r\n      reader.onerror = () => reject(new Error('Failed to read file'));\r\n    });\r\n  }\r\n\r\n  async analyzeAreaFromFile(file: File): Promise<AreaAnalysisResult> {\r\n    try {\r\n      const base64Image = await this.fileToBase64(file);\r\n      \r\n      const response = await fetch(`${this.baseUrl}/analyze-area`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ image: base64Image }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.error || `Area analysis failed: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Area analysis error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport const areaService = new AreaService(); "],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,uBAAuB;AAUjD,MAAMC,WAAW,CAAC;EAGhBC,WAAWA,CAACC,OAAe,GAAGH,iBAAiB,EAAE;IAAA,KAFzCG,OAAO;IAGb,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB;EAEA,MAAMC,WAAWA,CAAA,EAAuD;IACtE,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACH,OAAO,SAAS,CAAC;MACtD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC5D;MACA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAM,IAAIH,KAAK,CAAC,wCAAwC,CAAC;IAC3D;EACF;EAEAK,YAAYA,CAACC,IAAU,EAAmB;IACxC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,aAAa,CAACN,IAAI,CAAC;MAC1BI,MAAM,CAACG,MAAM,GAAG,MAAM;QACpB,IAAI,OAAOH,MAAM,CAACI,MAAM,KAAK,QAAQ,EAAE;UACrCN,OAAO,CAACE,MAAM,CAACI,MAAM,CAAC;QACxB,CAAC,MAAM;UACLL,MAAM,CAAC,IAAIT,KAAK,CAAC,kCAAkC,CAAC,CAAC;QACvD;MACF,CAAC;MACDU,MAAM,CAACK,OAAO,GAAG,MAAMN,MAAM,CAAC,IAAIT,KAAK,CAAC,qBAAqB,CAAC,CAAC;IACjE,CAAC,CAAC;EACJ;EAEA,MAAMgB,mBAAmBA,CAACV,IAAU,EAA+B;IACjE,IAAI;MACF,MAAMW,WAAW,GAAG,MAAM,IAAI,CAACZ,YAAY,CAACC,IAAI,CAAC;MAEjD,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACH,OAAO,eAAe,EAAE;QAC3DuB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,KAAK,EAAEN;QAAY,CAAC;MAC7C,CAAC,CAAC;MAEF,IAAI,CAACpB,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMyB,SAAS,GAAG,MAAM3B,QAAQ,CAACK,IAAI,CAAC,CAAC,CAACuB,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,IAAIzB,KAAK,CAACwB,SAAS,CAACrB,KAAK,IAAI,yBAAyBN,QAAQ,CAACI,MAAM,EAAE,CAAC;MAChF;MAEA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF;AACF;AAEA,OAAO,MAAMuB,WAAW,GAAG,IAAIjC,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}