{"ast":null,"code":"// AI Service for communicating with Python EfficientNet backend\n\nconst API_BASE_URL = 'http://localhost:5000';\nclass AIService {\n  constructor(baseUrl = API_BASE_URL) {\n    this.baseUrl = void 0;\n    this.baseUrl = baseUrl;\n  }\n\n  /**\r\n   * Check if the AI backend is healthy and ready\r\n   */\n  async checkHealth() {\n    try {\n      const response = await fetch(`${this.baseUrl}/health`);\n      if (!response.ok) {\n        throw new Error(`Health check failed: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Health check error:', error);\n      throw new Error('AI backend is not available');\n    }\n  }\n\n  /**\r\n   * Analyze plant image using EfficientNet\r\n   */\n  async analyzePlant(request) {\n    try {\n      const response = await fetch(`${this.baseUrl}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `Analysis failed: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('AI analysis error:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Convert file to base64 for API transmission\r\n   */\n  fileToBase64(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => {\n        if (typeof reader.result === 'string') {\n          resolve(reader.result);\n        } else {\n          reject(new Error('Failed to convert file to base64'));\n        }\n      };\n      reader.onerror = () => reject(new Error('Failed to read file'));\n    });\n  }\n\n  /**\r\n   * Analyze plant image from file\r\n   */\n  async analyzePlantFromFile(file, plantType, plantedDate) {\n    try {\n      // Convert file to base64\n      const base64Image = await this.fileToBase64(file);\n\n      // Send to AI backend\n      return await this.analyzePlant({\n        image: base64Image,\n        plantType,\n        plantedDate\n      });\n    } catch (error) {\n      console.error('Error analyzing plant from file:', error);\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nexport const aiService = new AIService();","map":{"version":3,"names":["API_BASE_URL","AIService","constructor","baseUrl","checkHealth","response","fetch","ok","Error","status","json","error","console","analyzePlant","request","method","headers","body","JSON","stringify","errorData","catch","fileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","analyzePlantFromFile","plantType","plantedDate","base64Image","image","aiService"],"sources":["C:/Hackathon/GrowEasy/src/services/aiService.ts"],"sourcesContent":["// AI Service for communicating with Python EfficientNet backend\r\n\r\nconst API_BASE_URL = 'http://localhost:5000';\r\n\r\nexport interface AIAnalysisResult {\r\n  growthAssessment: {\r\n    stage: string;\r\n    health: 'excellent' | 'good' | 'fair' | 'poor';\r\n    confidence: number;\r\n    description: string;\r\n    nextStage: string;\r\n    estimatedDays: number;\r\n    currentStageIndex: number;\r\n    totalStages: number;\r\n    progressPercentage: number;\r\n  };\r\n  anomalies: {\r\n    detected: boolean;\r\n    issues: Array<{\r\n      type: 'disease' | 'pest' | 'nutrient' | 'water' | 'light';\r\n      severity: 'low' | 'medium' | 'high';\r\n      description: string;\r\n      confidence: number;\r\n      recommendations: string[];\r\n    }>;\r\n  };\r\n  overallHealth: 'excellent' | 'good' | 'fair' | 'poor';\r\n  recommendations: string[];\r\n  analysisDate: string;\r\n  modelUsed: string;\r\n  confidence: number;\r\n}\r\n\r\nexport interface AnalysisRequest {\r\n  image: string; // base64 encoded image\r\n  plantType: string;\r\n  plantedDate: string;\r\n}\r\n\r\nclass AIService {\r\n  private baseUrl: string;\r\n\r\n  constructor(baseUrl: string = API_BASE_URL) {\r\n    this.baseUrl = baseUrl;\r\n  }\r\n\r\n  /**\r\n   * Check if the AI backend is healthy and ready\r\n   */\r\n  async checkHealth(): Promise<{ status: string; model_loaded: boolean; device: string }> {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/health`);\r\n      if (!response.ok) {\r\n        throw new Error(`Health check failed: ${response.status}`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Health check error:', error);\r\n      throw new Error('AI backend is not available');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze plant image using EfficientNet\r\n   */\r\n  async analyzePlant(request: AnalysisRequest): Promise<AIAnalysisResult> {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/analyze`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.error || `Analysis failed: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('AI analysis error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert file to base64 for API transmission\r\n   */\r\n  fileToBase64(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => {\r\n        if (typeof reader.result === 'string') {\r\n          resolve(reader.result);\r\n        } else {\r\n          reject(new Error('Failed to convert file to base64'));\r\n        }\r\n      };\r\n      reader.onerror = () => reject(new Error('Failed to read file'));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Analyze plant image from file\r\n   */\r\n  async analyzePlantFromFile(\r\n    file: File, \r\n    plantType: string, \r\n    plantedDate: string\r\n  ): Promise<AIAnalysisResult> {\r\n    try {\r\n      // Convert file to base64\r\n      const base64Image = await this.fileToBase64(file);\r\n      \r\n      // Send to AI backend\r\n      return await this.analyzePlant({\r\n        image: base64Image,\r\n        plantType,\r\n        plantedDate,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error analyzing plant from file:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const aiService = new AIService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}