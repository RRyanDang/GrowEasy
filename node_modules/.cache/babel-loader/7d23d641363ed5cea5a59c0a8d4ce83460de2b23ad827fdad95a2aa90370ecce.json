{"ast":null,"code":"// AI Analysis utility using EfficientNet for plant health assessment\n\n// Plant growth stages for different plant types\nconst PLANT_STAGES = {\n  'Tomato': ['Germination', 'Seedling', 'Vegetative Growth', 'Flowering', 'Fruiting'],\n  'Lettuce': ['Germination', 'Seedling', 'Leaf Development', 'Maturity'],\n  'Basil': ['Germination', 'Seedling', 'Vegetative Growth', 'Flowering'],\n  'Pepper': ['Germination', 'Seedling', 'Vegetative Growth', 'Flowering', 'Fruiting'],\n  'Cucumber': ['Germination', 'Seedling', 'Vine Growth', 'Flowering', 'Fruiting'],\n  'Carrot': ['Germination', 'Seedling', 'Root Development', 'Maturity'],\n  'Spinach': ['Germination', 'Seedling', 'Leaf Development', 'Maturity'],\n  'Kale': ['Germination', 'Seedling', 'Leaf Development', 'Maturity'],\n  'Mint': ['Germination', 'Seedling', 'Vegetative Growth', 'Maturity'],\n  'Rosemary': ['Germination', 'Seedling', 'Vegetative Growth', 'Maturity'],\n  'Thyme': ['Germination', 'Seedling', 'Vegetative Growth', 'Maturity'],\n  'Oregano': ['Germination', 'Seedling', 'Vegetative Growth', 'Maturity'],\n  'Parsley': ['Germination', 'Seedling', 'Leaf Development', 'Maturity'],\n  'Cilantro': ['Germination', 'Seedling', 'Leaf Development', 'Maturity'],\n  'Strawberry': ['Germination', 'Seedling', 'Vegetative Growth', 'Flowering', 'Fruiting'],\n  'Blueberry': ['Germination', 'Seedling', 'Vegetative Growth', 'Flowering', 'Fruiting'],\n  'Raspberry': ['Germination', 'Seedling', 'Vegetative Growth', 'Flowering', 'Fruiting'],\n  'Sunflower': ['Germination', 'Seedling', 'Vegetative Growth', 'Flowering'],\n  'Marigold': ['Germination', 'Seedling', 'Vegetative Growth', 'Flowering'],\n  'Lavender': ['Germination', 'Seedling', 'Vegetative Growth', 'Flowering']\n};\n\n// Disease and issue patterns for EfficientNet classification\nconst DISEASE_PATTERNS = {\n  'Tomato': {\n    'Early Blight': {\n      symptoms: ['brown spots', 'yellow leaves'],\n      severity: 'medium'\n    },\n    'Late Blight': {\n      symptoms: ['dark lesions', 'white mold'],\n      severity: 'high'\n    },\n    'Leaf Spot': {\n      symptoms: ['circular spots', 'yellowing'],\n      severity: 'low'\n    },\n    'Blossom End Rot': {\n      symptoms: ['black bottom', 'fruit damage'],\n      severity: 'medium'\n    },\n    'Nitrogen Deficiency': {\n      symptoms: ['yellow leaves', 'stunted growth'],\n      severity: 'medium'\n    },\n    'Overwatering': {\n      symptoms: ['wilting', 'yellow leaves'],\n      severity: 'low'\n    }\n  },\n  'Lettuce': {\n    'Downy Mildew': {\n      symptoms: ['yellow spots', 'white fuzz'],\n      severity: 'high'\n    },\n    'Bacterial Leaf Spot': {\n      symptoms: ['brown spots', 'holes'],\n      severity: 'medium'\n    },\n    'Tip Burn': {\n      symptoms: ['brown edges', 'leaf damage'],\n      severity: 'low'\n    },\n    'Overwatering': {\n      symptoms: ['wilting', 'root rot'],\n      severity: 'medium'\n    }\n  }\n};\n\n// EfficientNet model configuration\nconst EFFICIENTNET_CONFIG = {\n  model: 'efficientnet-b0',\n  // or b1, b2, b3, b4, b5, b6, b7\n  inputSize: 224,\n  // Standard input size for EfficientNet\n  numClasses: 1000,\n  // ImageNet classes\n  pretrained: true\n};\n\n// Simulated EfficientNet analysis function\nexport async function analyzePlantWithEfficientNet(imageFile, plantType, plantedDate) {\n  // Simulate EfficientNet processing time\n  await new Promise(resolve => setTimeout(resolve, 2000));\n\n  // Simulate EfficientNet feature extraction and classification\n  const features = await extractFeatures(imageFile);\n  const classifications = await classifyPlantHealth(features, plantType);\n\n  // Determine growth stage based on plant type and time since planting\n  const daysSincePlanting = Math.floor((Date.now() - new Date(plantedDate).getTime()) / (1000 * 60 * 60 * 24));\n  const currentStage = determineGrowthStage(plantType, daysSincePlanting, classifications);\n\n  // Analyze for anomalies using EfficientNet disease detection\n  const anomalies = detectAnomalies(classifications, plantType);\n\n  // Generate comprehensive analysis result\n  return {\n    growthAssessment: {\n      stage: currentStage.stage,\n      health: currentStage.health,\n      confidence: currentStage.confidence,\n      description: generateGrowthDescription(currentStage, plantType),\n      nextStage: currentStage.nextStage,\n      estimatedDays: currentStage.estimatedDays\n    },\n    anomalies: anomalies,\n    overallHealth: determineOverallHealth(currentStage.health, anomalies),\n    recommendations: generateRecommendations(currentStage, anomalies, plantType)\n  };\n}\n\n// Simulate EfficientNet feature extraction\nasync function extractFeatures(imageFile) {\n  // In real implementation, this would:\n  // 1. Load the image\n  // 2. Preprocess it (resize to 224x224, normalize)\n  // 3. Pass through EfficientNet layers\n  // 4. Extract features from the final layer\n\n  // Simulated feature vector (1000 features from EfficientNet)\n  return Array.from({\n    length: 1000\n  }, () => Math.random());\n}\n\n// Simulate EfficientNet classification\nasync function classifyPlantHealth(features, plantType) {\n  // In real implementation, this would:\n  // 1. Use pre-trained EfficientNet weights\n  // 2. Apply transfer learning for plant-specific classification\n  // 3. Return confidence scores for different classes\n\n  // Simulated classification results\n  return {\n    healthy: Math.random() * 0.8 + 0.2,\n    // 20-100% confidence\n    diseased: Math.random() * 0.3,\n    // 0-30% confidence\n    nutrientDeficient: Math.random() * 0.4,\n    // 0-40% confidence\n    pestInfested: Math.random() * 0.2,\n    // 0-20% confidence\n    overwatered: Math.random() * 0.3,\n    // 0-30% confidence\n    underwatered: Math.random() * 0.2 // 0-20% confidence\n  };\n}\n\n// Determine growth stage based on EfficientNet analysis and time\nfunction determineGrowthStage(plantType, daysSincePlanting, classifications) {\n  const stages = PLANT_STAGES[plantType] || PLANT_STAGES['Tomato'];\n\n  // Use EfficientNet features to determine current stage\n  const healthScore = classifications.healthy;\n  let currentStageIndex = 0;\n  if (daysSincePlanting < 7) {\n    currentStageIndex = 0; // Germination\n  } else if (daysSincePlanting < 21) {\n    currentStageIndex = 1; // Seedling\n  } else if (daysSincePlanting < 60) {\n    currentStageIndex = 2; // Vegetative Growth\n  } else if (daysSincePlanting < 90) {\n    currentStageIndex = 3; // Flowering\n  } else {\n    currentStageIndex = 4; // Fruiting/Maturity\n  }\n\n  // Adjust based on EfficientNet health analysis\n  if (healthScore < 0.5) {\n    currentStageIndex = Math.max(0, currentStageIndex - 1); // Delayed growth\n  }\n  const currentStage = stages[Math.min(currentStageIndex, stages.length - 1)];\n  const nextStage = stages[Math.min(currentStageIndex + 1, stages.length - 1)];\n\n  // Determine health based on EfficientNet confidence\n  let health;\n  if (healthScore > 0.8) health = 'excellent';else if (healthScore > 0.6) health = 'good';else if (healthScore > 0.4) health = 'fair';else health = 'poor';\n  return {\n    stage: currentStage,\n    health,\n    confidence: healthScore,\n    nextStage,\n    estimatedDays: Math.max(0, 30 - daysSincePlanting)\n  };\n}\n\n// Detect anomalies using EfficientNet disease classification\nfunction detectAnomalies(classifications, plantType) {\n  const issues = [];\n  const diseasePatterns = DISEASE_PATTERNS[plantType] || DISEASE_PATTERNS['Tomato'];\n\n  // Check for diseases based on EfficientNet classifications\n  if (classifications.diseased > 0.3) {\n    issues.push({\n      type: 'disease',\n      severity: classifications.diseased > 0.6 ? 'high' : 'medium',\n      description: 'Plant disease detected - possible fungal or bacterial infection',\n      confidence: classifications.diseased,\n      recommendations: ['Apply fungicide', 'Improve air circulation', 'Remove affected leaves']\n    });\n  }\n  if (classifications.nutrientDeficient > 0.4) {\n    issues.push({\n      type: 'nutrient',\n      severity: 'medium',\n      description: 'Nutrient deficiency detected - likely nitrogen or phosphorus',\n      confidence: classifications.nutrientDeficient,\n      recommendations: ['Apply balanced fertilizer', 'Check soil pH', 'Add organic matter']\n    });\n  }\n  if (classifications.pestInfested > 0.3) {\n    issues.push({\n      type: 'pest',\n      severity: classifications.pestInfested > 0.5 ? 'high' : 'low',\n      description: 'Pest activity detected - inspect for insects',\n      confidence: classifications.pestInfested,\n      recommendations: ['Inspect underside of leaves', 'Apply organic pest control', 'Remove affected parts']\n    });\n  }\n  if (classifications.overwatered > 0.4) {\n    issues.push({\n      type: 'water',\n      severity: 'medium',\n      description: 'Overwatering detected - soil may be too wet',\n      confidence: classifications.overwatered,\n      recommendations: ['Reduce watering frequency', 'Improve drainage', 'Check soil moisture']\n    });\n  }\n  return {\n    detected: issues.length > 0,\n    issues\n  };\n}\n\n// Helper functions\nfunction generateGrowthDescription(stage, plantType) {\n  return `Your ${plantType} is progressing well through the ${stage.stage.toLowerCase()} stage. The plant shows ${stage.health} health with strong development. Estimated ${stage.estimatedDays} days until ${stage.nextStage.toLowerCase()}.`;\n}\nfunction determineOverallHealth(growthHealth, anomalies) {\n  if (anomalies.detected && anomalies.issues.some(i => i.severity === 'high')) {\n    return 'poor';\n  } else if (anomalies.detected) {\n    return 'fair';\n  } else if (growthHealth === 'excellent') {\n    return 'excellent';\n  } else {\n    return 'good';\n  }\n}\nfunction generateRecommendations(stage, anomalies, plantType) {\n  const recommendations = [];\n\n  // Growth-based recommendations\n  if (stage.health === 'poor') {\n    recommendations.push('Increase watering frequency');\n    recommendations.push('Add organic fertilizer');\n  }\n\n  // Anomaly-based recommendations\n  anomalies.issues.forEach(issue => {\n    recommendations.push(...issue.recommendations);\n  });\n\n  // Plant-specific recommendations\n  if (plantType === 'Tomato') {\n    recommendations.push('Provide support as plant grows');\n    recommendations.push('Prune suckers for better fruit production');\n  }\n  return recommendations.slice(0, 5); // Limit to top 5 recommendations\n}\n\n// Export for use in components","map":{"version":3,"names":["PLANT_STAGES","DISEASE_PATTERNS","symptoms","severity","EFFICIENTNET_CONFIG","model","inputSize","numClasses","pretrained","analyzePlantWithEfficientNet","imageFile","plantType","plantedDate","Promise","resolve","setTimeout","features","extractFeatures","classifications","classifyPlantHealth","daysSincePlanting","Math","floor","Date","now","getTime","currentStage","determineGrowthStage","anomalies","detectAnomalies","growthAssessment","stage","health","confidence","description","generateGrowthDescription","nextStage","estimatedDays","overallHealth","determineOverallHealth","recommendations","generateRecommendations","Array","from","length","random","healthy","diseased","nutrientDeficient","pestInfested","overwatered","underwatered","stages","healthScore","currentStageIndex","max","min","issues","diseasePatterns","push","type","detected","toLowerCase","growthHealth","some","i","forEach","issue","slice"],"sources":["C:/Hackathon/GrowEasy/src/utils/aiAnalysis.ts"],"sourcesContent":["// AI Analysis utility using EfficientNet for plant health assessment\r\n\r\ninterface AnalysisResult {\r\n  growthAssessment: {\r\n    stage: string;\r\n    health: 'excellent' | 'good' | 'fair' | 'poor';\r\n    confidence: number;\r\n    description: string;\r\n    nextStage: string;\r\n    estimatedDays: number;\r\n  };\r\n  anomalies: {\r\n    detected: boolean;\r\n    issues: Array<{\r\n      type: 'disease' | 'pest' | 'nutrient' | 'water' | 'light';\r\n      severity: 'low' | 'medium' | 'high';\r\n      description: string;\r\n      confidence: number;\r\n      recommendations: string[];\r\n    }>;\r\n  };\r\n  overallHealth: 'excellent' | 'good' | 'fair' | 'poor';\r\n  recommendations: string[];\r\n}\r\n\r\n// Plant growth stages for different plant types\r\nconst PLANT_STAGES = {\r\n  'Tomato': ['Germination', 'Seedling', 'Vegetative Growth', 'Flowering', 'Fruiting'],\r\n  'Lettuce': ['Germination', 'Seedling', 'Leaf Development', 'Maturity'],\r\n  'Basil': ['Germination', 'Seedling', 'Vegetative Growth', 'Flowering'],\r\n  'Pepper': ['Germination', 'Seedling', 'Vegetative Growth', 'Flowering', 'Fruiting'],\r\n  'Cucumber': ['Germination', 'Seedling', 'Vine Growth', 'Flowering', 'Fruiting'],\r\n  'Carrot': ['Germination', 'Seedling', 'Root Development', 'Maturity'],\r\n  'Spinach': ['Germination', 'Seedling', 'Leaf Development', 'Maturity'],\r\n  'Kale': ['Germination', 'Seedling', 'Leaf Development', 'Maturity'],\r\n  'Mint': ['Germination', 'Seedling', 'Vegetative Growth', 'Maturity'],\r\n  'Rosemary': ['Germination', 'Seedling', 'Vegetative Growth', 'Maturity'],\r\n  'Thyme': ['Germination', 'Seedling', 'Vegetative Growth', 'Maturity'],\r\n  'Oregano': ['Germination', 'Seedling', 'Vegetative Growth', 'Maturity'],\r\n  'Parsley': ['Germination', 'Seedling', 'Leaf Development', 'Maturity'],\r\n  'Cilantro': ['Germination', 'Seedling', 'Leaf Development', 'Maturity'],\r\n  'Strawberry': ['Germination', 'Seedling', 'Vegetative Growth', 'Flowering', 'Fruiting'],\r\n  'Blueberry': ['Germination', 'Seedling', 'Vegetative Growth', 'Flowering', 'Fruiting'],\r\n  'Raspberry': ['Germination', 'Seedling', 'Vegetative Growth', 'Flowering', 'Fruiting'],\r\n  'Sunflower': ['Germination', 'Seedling', 'Vegetative Growth', 'Flowering'],\r\n  'Marigold': ['Germination', 'Seedling', 'Vegetative Growth', 'Flowering'],\r\n  'Lavender': ['Germination', 'Seedling', 'Vegetative Growth', 'Flowering']\r\n};\r\n\r\n// Disease and issue patterns for EfficientNet classification\r\nconst DISEASE_PATTERNS = {\r\n  'Tomato': {\r\n    'Early Blight': { symptoms: ['brown spots', 'yellow leaves'], severity: 'medium' },\r\n    'Late Blight': { symptoms: ['dark lesions', 'white mold'], severity: 'high' },\r\n    'Leaf Spot': { symptoms: ['circular spots', 'yellowing'], severity: 'low' },\r\n    'Blossom End Rot': { symptoms: ['black bottom', 'fruit damage'], severity: 'medium' },\r\n    'Nitrogen Deficiency': { symptoms: ['yellow leaves', 'stunted growth'], severity: 'medium' },\r\n    'Overwatering': { symptoms: ['wilting', 'yellow leaves'], severity: 'low' }\r\n  },\r\n  'Lettuce': {\r\n    'Downy Mildew': { symptoms: ['yellow spots', 'white fuzz'], severity: 'high' },\r\n    'Bacterial Leaf Spot': { symptoms: ['brown spots', 'holes'], severity: 'medium' },\r\n    'Tip Burn': { symptoms: ['brown edges', 'leaf damage'], severity: 'low' },\r\n    'Overwatering': { symptoms: ['wilting', 'root rot'], severity: 'medium' }\r\n  }\r\n};\r\n\r\n// EfficientNet model configuration\r\nconst EFFICIENTNET_CONFIG = {\r\n  model: 'efficientnet-b0', // or b1, b2, b3, b4, b5, b6, b7\r\n  inputSize: 224, // Standard input size for EfficientNet\r\n  numClasses: 1000, // ImageNet classes\r\n  pretrained: true\r\n};\r\n\r\n// Simulated EfficientNet analysis function\r\nexport async function analyzePlantWithEfficientNet(\r\n  imageFile: File, \r\n  plantType: string, \r\n  plantedDate: string\r\n): Promise<AnalysisResult> {\r\n  \r\n  // Simulate EfficientNet processing time\r\n  await new Promise(resolve => setTimeout(resolve, 2000));\r\n  \r\n  // Simulate EfficientNet feature extraction and classification\r\n  const features = await extractFeatures(imageFile);\r\n  const classifications = await classifyPlantHealth(features, plantType);\r\n  \r\n  // Determine growth stage based on plant type and time since planting\r\n  const daysSincePlanting = Math.floor((Date.now() - new Date(plantedDate).getTime()) / (1000 * 60 * 60 * 24));\r\n  const currentStage = determineGrowthStage(plantType, daysSincePlanting, classifications);\r\n  \r\n  // Analyze for anomalies using EfficientNet disease detection\r\n  const anomalies = detectAnomalies(classifications, plantType);\r\n  \r\n  // Generate comprehensive analysis result\r\n  return {\r\n    growthAssessment: {\r\n      stage: currentStage.stage,\r\n      health: currentStage.health,\r\n      confidence: currentStage.confidence,\r\n      description: generateGrowthDescription(currentStage, plantType),\r\n      nextStage: currentStage.nextStage,\r\n      estimatedDays: currentStage.estimatedDays\r\n    },\r\n    anomalies: anomalies,\r\n    overallHealth: determineOverallHealth(currentStage.health, anomalies),\r\n    recommendations: generateRecommendations(currentStage, anomalies, plantType)\r\n  };\r\n}\r\n\r\n// Simulate EfficientNet feature extraction\r\nasync function extractFeatures(imageFile: File): Promise<number[]> {\r\n  // In real implementation, this would:\r\n  // 1. Load the image\r\n  // 2. Preprocess it (resize to 224x224, normalize)\r\n  // 3. Pass through EfficientNet layers\r\n  // 4. Extract features from the final layer\r\n  \r\n  // Simulated feature vector (1000 features from EfficientNet)\r\n  return Array.from({ length: 1000 }, () => Math.random());\r\n}\r\n\r\n// Simulate EfficientNet classification\r\nasync function classifyPlantHealth(features: number[], plantType: string): Promise<any> {\r\n  // In real implementation, this would:\r\n  // 1. Use pre-trained EfficientNet weights\r\n  // 2. Apply transfer learning for plant-specific classification\r\n  // 3. Return confidence scores for different classes\r\n  \r\n  // Simulated classification results\r\n  return {\r\n    healthy: Math.random() * 0.8 + 0.2, // 20-100% confidence\r\n    diseased: Math.random() * 0.3, // 0-30% confidence\r\n    nutrientDeficient: Math.random() * 0.4, // 0-40% confidence\r\n    pestInfested: Math.random() * 0.2, // 0-20% confidence\r\n    overwatered: Math.random() * 0.3, // 0-30% confidence\r\n    underwatered: Math.random() * 0.2 // 0-20% confidence\r\n  };\r\n}\r\n\r\n// Determine growth stage based on EfficientNet analysis and time\r\nfunction determineGrowthStage(plantType: string, daysSincePlanting: number, classifications: any) {\r\n  const stages = PLANT_STAGES[plantType as keyof typeof PLANT_STAGES] || PLANT_STAGES['Tomato'];\r\n  \r\n  // Use EfficientNet features to determine current stage\r\n  const healthScore = classifications.healthy;\r\n  let currentStageIndex = 0;\r\n  \r\n  if (daysSincePlanting < 7) {\r\n    currentStageIndex = 0; // Germination\r\n  } else if (daysSincePlanting < 21) {\r\n    currentStageIndex = 1; // Seedling\r\n  } else if (daysSincePlanting < 60) {\r\n    currentStageIndex = 2; // Vegetative Growth\r\n  } else if (daysSincePlanting < 90) {\r\n    currentStageIndex = 3; // Flowering\r\n  } else {\r\n    currentStageIndex = 4; // Fruiting/Maturity\r\n  }\r\n  \r\n  // Adjust based on EfficientNet health analysis\r\n  if (healthScore < 0.5) {\r\n    currentStageIndex = Math.max(0, currentStageIndex - 1); // Delayed growth\r\n  }\r\n  \r\n  const currentStage = stages[Math.min(currentStageIndex, stages.length - 1)];\r\n  const nextStage = stages[Math.min(currentStageIndex + 1, stages.length - 1)];\r\n  \r\n  // Determine health based on EfficientNet confidence\r\n  let health: 'excellent' | 'good' | 'fair' | 'poor';\r\n  if (healthScore > 0.8) health = 'excellent';\r\n  else if (healthScore > 0.6) health = 'good';\r\n  else if (healthScore > 0.4) health = 'fair';\r\n  else health = 'poor';\r\n  \r\n  return {\r\n    stage: currentStage,\r\n    health,\r\n    confidence: healthScore,\r\n    nextStage,\r\n    estimatedDays: Math.max(0, 30 - daysSincePlanting)\r\n  };\r\n}\r\n\r\n// Detect anomalies using EfficientNet disease classification\r\nfunction detectAnomalies(classifications: any, plantType: string) {\r\n  const issues = [];\r\n  const diseasePatterns = DISEASE_PATTERNS[plantType as keyof typeof DISEASE_PATTERNS] || DISEASE_PATTERNS['Tomato'];\r\n  \r\n  // Check for diseases based on EfficientNet classifications\r\n  if (classifications.diseased > 0.3) {\r\n    issues.push({\r\n      type: 'disease' as const,\r\n      severity: classifications.diseased > 0.6 ? 'high' : 'medium',\r\n      description: 'Plant disease detected - possible fungal or bacterial infection',\r\n      confidence: classifications.diseased,\r\n      recommendations: ['Apply fungicide', 'Improve air circulation', 'Remove affected leaves']\r\n    });\r\n  }\r\n  \r\n  if (classifications.nutrientDeficient > 0.4) {\r\n    issues.push({\r\n      type: 'nutrient' as const,\r\n      severity: 'medium',\r\n      description: 'Nutrient deficiency detected - likely nitrogen or phosphorus',\r\n      confidence: classifications.nutrientDeficient,\r\n      recommendations: ['Apply balanced fertilizer', 'Check soil pH', 'Add organic matter']\r\n    });\r\n  }\r\n  \r\n  if (classifications.pestInfested > 0.3) {\r\n    issues.push({\r\n      type: 'pest' as const,\r\n      severity: classifications.pestInfested > 0.5 ? 'high' : 'low',\r\n      description: 'Pest activity detected - inspect for insects',\r\n      confidence: classifications.pestInfested,\r\n      recommendations: ['Inspect underside of leaves', 'Apply organic pest control', 'Remove affected parts']\r\n    });\r\n  }\r\n  \r\n  if (classifications.overwatered > 0.4) {\r\n    issues.push({\r\n      type: 'water' as const,\r\n      severity: 'medium',\r\n      description: 'Overwatering detected - soil may be too wet',\r\n      confidence: classifications.overwatered,\r\n      recommendations: ['Reduce watering frequency', 'Improve drainage', 'Check soil moisture']\r\n    });\r\n  }\r\n  \r\n  return {\r\n    detected: issues.length > 0,\r\n    issues\r\n  };\r\n}\r\n\r\n// Helper functions\r\nfunction generateGrowthDescription(stage: any, plantType: string): string {\r\n  return `Your ${plantType} is progressing well through the ${stage.stage.toLowerCase()} stage. The plant shows ${stage.health} health with strong development. Estimated ${stage.estimatedDays} days until ${stage.nextStage.toLowerCase()}.`;\r\n}\r\n\r\nfunction determineOverallHealth(growthHealth: string, anomalies: any): 'excellent' | 'good' | 'fair' | 'poor' {\r\n  if (anomalies.detected && anomalies.issues.some((i: any) => i.severity === 'high')) {\r\n    return 'poor';\r\n  } else if (anomalies.detected) {\r\n    return 'fair';\r\n  } else if (growthHealth === 'excellent') {\r\n    return 'excellent';\r\n  } else {\r\n    return 'good';\r\n  }\r\n}\r\n\r\nfunction generateRecommendations(stage: any, anomalies: any, plantType: string): string[] {\r\n  const recommendations = [];\r\n  \r\n  // Growth-based recommendations\r\n  if (stage.health === 'poor') {\r\n    recommendations.push('Increase watering frequency');\r\n    recommendations.push('Add organic fertilizer');\r\n  }\r\n  \r\n  // Anomaly-based recommendations\r\n  anomalies.issues.forEach((issue: any) => {\r\n    recommendations.push(...issue.recommendations);\r\n  });\r\n  \r\n  // Plant-specific recommendations\r\n  if (plantType === 'Tomato') {\r\n    recommendations.push('Provide support as plant grows');\r\n    recommendations.push('Prune suckers for better fruit production');\r\n  }\r\n  \r\n  return recommendations.slice(0, 5); // Limit to top 5 recommendations\r\n}\r\n\r\n// Export for use in components\r\nexport type { AnalysisResult }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}